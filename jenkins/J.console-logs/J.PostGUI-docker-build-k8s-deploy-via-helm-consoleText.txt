Started by user Anastas Davarski
Running in Durability level: MAX_SURVIVABILITY
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/PostGUI-docker-build-k8s-deploy-via-helm
[Pipeline] {
[Pipeline] timestamps
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Clone PostGUI Demo Repository)
[Pipeline] checkout
[2021-10-27T10:13:07.665Z] The recommended git tool is: NONE
[2021-10-27T10:13:07.665Z] using credential devops
[2021-10-27T10:13:07.671Z] Cloning the remote Git repository
[2021-10-27T10:13:07.671Z] Cloning repository git@github.com:adavarski/PostGUI-k8s-demo.git
[2021-10-27T10:13:07.671Z]  > git init /var/lib/jenkins/workspace/PostGUI-docker-build-k8s-deploy-via-helm/postgui # timeout=10
[2021-10-27T10:13:07.709Z] Fetching upstream changes from git@github.com:adavarski/PostGUI-k8s-demo.git
[2021-10-27T10:13:07.710Z]  > git --version # timeout=10
[2021-10-27T10:13:07.713Z]  > git --version # 'git version 2.17.1'
[2021-10-27T10:13:07.713Z] using GIT_SSH to set credentials Github devops 
[2021-10-27T10:13:07.718Z]  > git fetch --tags --progress -- git@github.com:adavarski/PostGUI-k8s-demo.git +refs/heads/*:refs/remotes/origin/* # timeout=10
[2021-10-27T10:13:10.559Z]  > git config remote.origin.url git@github.com:adavarski/PostGUI-k8s-demo.git # timeout=10
[2021-10-27T10:13:10.565Z]  > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
[2021-10-27T10:13:10.572Z] Avoid second fetch
[2021-10-27T10:13:10.572Z]  > git rev-parse origin/main^{commit} # timeout=10
[2021-10-27T10:13:10.582Z] Checking out Revision c2f40da321b8650fae046b906e0ddf6edbb95922 (origin/main)
[2021-10-27T10:13:10.582Z]  > git config core.sparsecheckout # timeout=10
[2021-10-27T10:13:10.587Z]  > git checkout -f c2f40da321b8650fae046b906e0ddf6edbb95922 # timeout=10
[2021-10-27T10:13:10.616Z] Commit message: "Add files via upload"
[2021-10-27T10:13:10.617Z] First time build. Skipping changelog.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build PostGUI docker image)
[Pipeline] dir
[2021-10-27T10:13:10.790Z] Running in /var/lib/jenkins/workspace/PostGUI-docker-build-k8s-deploy-via-helm/postgui/postgui-docker
[Pipeline] {
[Pipeline] script
[Pipeline] {
[Pipeline] isUnix
[Pipeline] sh
[2021-10-27T10:13:11.356Z] + docker build -t davarski/postgui .
[2021-10-27T10:13:13.841Z] Sending build context to Docker daemon   1.39MB
[2021-10-27T10:13:13.841Z] Step 1/9 : FROM node:16
[2021-10-27T10:13:13.841Z]  ---> 3b66eb585643
[2021-10-27T10:13:13.841Z] Step 2/9 : RUN apt update
[2021-10-27T10:13:13.841Z]  ---> Using cache
[2021-10-27T10:13:13.841Z]  ---> dd18802cf0d5
[2021-10-27T10:13:13.841Z] Step 3/9 : WORKDIR /app
[2021-10-27T10:13:13.841Z]  ---> Using cache
[2021-10-27T10:13:13.841Z]  ---> 30e1958e5e14
[2021-10-27T10:13:13.841Z] Step 4/9 : COPY package.json .
[2021-10-27T10:13:13.841Z]  ---> Using cache
[2021-10-27T10:13:13.841Z]  ---> 97afef6bf5ce
[2021-10-27T10:13:13.841Z] Step 5/9 : RUN npm install
[2021-10-27T10:13:13.841Z]  ---> Using cache
[2021-10-27T10:13:13.841Z]  ---> 59fb845342c4
[2021-10-27T10:13:13.841Z] Step 6/9 : COPY . .
[2021-10-27T10:13:13.841Z]  ---> Using cache
[2021-10-27T10:13:13.841Z]  ---> cf63f591a22f
[2021-10-27T10:13:13.841Z] Step 7/9 : USER node
[2021-10-27T10:13:13.841Z]  ---> Using cache
[2021-10-27T10:13:13.841Z]  ---> 6f03ecf56423
[2021-10-27T10:13:13.841Z] Step 8/9 : EXPOSE 8771
[2021-10-27T10:13:13.841Z]  ---> Using cache
[2021-10-27T10:13:13.841Z]  ---> 99ac691b62e5
[2021-10-27T10:13:13.841Z] Step 9/9 : CMD [ "npm", "start"]
[2021-10-27T10:13:13.841Z]  ---> Using cache
[2021-10-27T10:13:13.841Z]  ---> 64d8f5f5bf89
[2021-10-27T10:13:13.845Z] Successfully built 64d8f5f5bf89
[2021-10-27T10:13:13.845Z] Successfully tagged davarski/postgui:latest
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Push PostGUI docker image to DockerHub)
[Pipeline] dir
[2021-10-27T10:13:14.140Z] Running in /var/lib/jenkins/workspace/PostGUI-docker-build-k8s-deploy-via-helm/postgui/postgui-docker
[Pipeline] {
[Pipeline] script
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withDockerRegistry
[2021-10-27T10:13:14.278Z] Using the existing docker config file.Removing blacklisted property: auths$ docker login -u davarski -p ******** https://index.docker.io/v1/
[2021-10-27T10:13:14.316Z] WARNING! Using --password via the CLI is insecure. Use --password-stdin.
[2021-10-27T10:13:16.703Z] WARNING! Your password will be stored unencrypted in /var/lib/jenkins/workspace/PostGUI-docker-build-k8s-deploy-via-helm/postgui/postgui-docker@tmp/a65bf5d1-070c-4011-a979-06514fda069e/config.json.
[2021-10-27T10:13:16.703Z] Configure a credential helper to remove this warning. See
[2021-10-27T10:13:16.703Z] https://docs.docker.com/engine/reference/commandline/login/#credentials-store
[2021-10-27T10:13:16.703Z] 
[2021-10-27T10:13:16.703Z] Login Succeeded
[Pipeline] {
[Pipeline] isUnix
[Pipeline] sh
[2021-10-27T10:13:17.013Z] + docker tag davarski/postgui davarski/postgui:1.0
[Pipeline] isUnix
[Pipeline] sh
[2021-10-27T10:13:17.335Z] + docker push davarski/postgui:1.0
[2021-10-27T10:13:17.335Z] The push refers to repository [docker.io/davarski/postgui]
[2021-10-27T10:13:18.248Z] 205bfb88d27b: Preparing
[2021-10-27T10:13:18.248Z] ab0d12997671: Preparing
[2021-10-27T10:13:18.248Z] 1be37e30c93d: Preparing
[2021-10-27T10:13:18.248Z] a6881484b16b: Preparing
[2021-10-27T10:13:18.248Z] f631681fe409: Preparing
[2021-10-27T10:13:18.248Z] c0df126019a7: Preparing
[2021-10-27T10:13:18.248Z] be5907a29722: Preparing
[2021-10-27T10:13:18.248Z] 4c3ac155f9ef: Preparing
[2021-10-27T10:13:18.248Z] dd3e4be546bd: Preparing
[2021-10-27T10:13:18.248Z] 9e28eabfde8b: Preparing
[2021-10-27T10:13:18.248Z] 52ed97b6b9c6: Preparing
[2021-10-27T10:13:18.248Z] 2ff7f567e600: Preparing
[2021-10-27T10:13:18.248Z] 42aff4deb538: Preparing
[2021-10-27T10:13:18.248Z] d6a325d281f2: Preparing
[2021-10-27T10:13:18.248Z] 9e28eabfde8b: Waiting
[2021-10-27T10:13:18.248Z] 52ed97b6b9c6: Waiting
[2021-10-27T10:13:18.248Z] c0df126019a7: Waiting
[2021-10-27T10:13:18.248Z] be5907a29722: Waiting
[2021-10-27T10:13:18.248Z] 4c3ac155f9ef: Waiting
[2021-10-27T10:13:18.248Z] 2ff7f567e600: Waiting
[2021-10-27T10:13:18.248Z] 42aff4deb538: Waiting
[2021-10-27T10:13:18.248Z] dd3e4be546bd: Waiting
[2021-10-27T10:13:18.248Z] d6a325d281f2: Waiting
[2021-10-27T10:13:20.111Z] a6881484b16b: Layer already exists
[2021-10-27T10:13:20.111Z] ab0d12997671: Layer already exists
[2021-10-27T10:13:20.111Z] 1be37e30c93d: Layer already exists
[2021-10-27T10:13:20.111Z] f631681fe409: Layer already exists
[2021-10-27T10:13:20.111Z] 205bfb88d27b: Layer already exists
[2021-10-27T10:13:21.023Z] 4c3ac155f9ef: Layer already exists
[2021-10-27T10:13:21.023Z] be5907a29722: Layer already exists
[2021-10-27T10:13:21.023Z] 9e28eabfde8b: Layer already exists
[2021-10-27T10:13:21.023Z] c0df126019a7: Layer already exists
[2021-10-27T10:13:21.023Z] dd3e4be546bd: Layer already exists
[2021-10-27T10:13:21.934Z] d6a325d281f2: Layer already exists
[2021-10-27T10:13:21.934Z] 52ed97b6b9c6: Layer already exists
[2021-10-27T10:13:21.934Z] 42aff4deb538: Layer already exists
[2021-10-27T10:13:21.934Z] 2ff7f567e600: Layer already exists
[2021-10-27T10:13:25.163Z] 1.0: digest: sha256:5836f3ba08dfc69f3d0c5fad6293f97c878ae6468ea28ee6d93b413db90e1141 size: 3263
[Pipeline] isUnix
[Pipeline] sh
[2021-10-27T10:13:25.463Z] + docker tag davarski/postgui davarski/postgui:latest
[Pipeline] isUnix
[Pipeline] sh
[2021-10-27T10:13:25.768Z] + docker push davarski/postgui:latest
[2021-10-27T10:13:25.768Z] The push refers to repository [docker.io/davarski/postgui]
[2021-10-27T10:13:26.680Z] 205bfb88d27b: Preparing
[2021-10-27T10:13:26.680Z] ab0d12997671: Preparing
[2021-10-27T10:13:26.680Z] 1be37e30c93d: Preparing
[2021-10-27T10:13:26.680Z] a6881484b16b: Preparing
[2021-10-27T10:13:26.680Z] f631681fe409: Preparing
[2021-10-27T10:13:26.680Z] c0df126019a7: Preparing
[2021-10-27T10:13:26.680Z] be5907a29722: Preparing
[2021-10-27T10:13:26.680Z] 4c3ac155f9ef: Preparing
[2021-10-27T10:13:26.680Z] dd3e4be546bd: Preparing
[2021-10-27T10:13:26.680Z] 9e28eabfde8b: Preparing
[2021-10-27T10:13:26.680Z] 52ed97b6b9c6: Preparing
[2021-10-27T10:13:26.680Z] 2ff7f567e600: Preparing
[2021-10-27T10:13:26.680Z] 42aff4deb538: Preparing
[2021-10-27T10:13:26.680Z] d6a325d281f2: Preparing
[2021-10-27T10:13:26.680Z] c0df126019a7: Waiting
[2021-10-27T10:13:26.680Z] be5907a29722: Waiting
[2021-10-27T10:13:26.680Z] 4c3ac155f9ef: Waiting
[2021-10-27T10:13:26.680Z] 9e28eabfde8b: Waiting
[2021-10-27T10:13:26.680Z] 52ed97b6b9c6: Waiting
[2021-10-27T10:13:26.680Z] dd3e4be546bd: Waiting
[2021-10-27T10:13:26.680Z] 2ff7f567e600: Waiting
[2021-10-27T10:13:26.680Z] 42aff4deb538: Waiting
[2021-10-27T10:13:26.680Z] d6a325d281f2: Waiting
[2021-10-27T10:13:28.543Z] f631681fe409: Layer already exists
[2021-10-27T10:13:28.543Z] 1be37e30c93d: Layer already exists
[2021-10-27T10:13:28.543Z] ab0d12997671: Layer already exists
[2021-10-27T10:13:28.543Z] a6881484b16b: Layer already exists
[2021-10-27T10:13:28.543Z] 205bfb88d27b: Layer already exists
[2021-10-27T10:13:29.454Z] c0df126019a7: Layer already exists
[2021-10-27T10:13:29.454Z] 9e28eabfde8b: Layer already exists
[2021-10-27T10:13:29.454Z] be5907a29722: Layer already exists
[2021-10-27T10:13:29.454Z] dd3e4be546bd: Layer already exists
[2021-10-27T10:13:29.454Z] 4c3ac155f9ef: Layer already exists
[2021-10-27T10:13:30.005Z] 52ed97b6b9c6: Layer already exists
[2021-10-27T10:13:30.006Z] 42aff4deb538: Layer already exists
[2021-10-27T10:13:30.006Z] 2ff7f567e600: Layer already exists
[2021-10-27T10:13:30.006Z] d6a325d281f2: Layer already exists
[2021-10-27T10:13:36.488Z] latest: digest: sha256:5836f3ba08dfc69f3d0c5fad6293f97c878ae6468ea28ee6d93b413db90e1141 size: 3263
[Pipeline] }
[Pipeline] // withDockerRegistry
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy Postgres & PostgREST via k8s manifests)
[Pipeline] dir
[2021-10-27T10:13:36.793Z] Running in /var/lib/jenkins/workspace/PostGUI-docker-build-k8s-deploy-via-helm/postgui/k8s/k8s-manifests
[Pipeline] {
[Pipeline] script
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
[2021-10-27T10:13:37.170Z] + kubectl apply -f postgres-deployment.yaml -f postgres-service.yaml -f postgrest-deployment.yaml -f postgrest-service.yaml
[2021-10-27T10:13:38.513Z] deployment.apps/postgres created
[2021-10-27T10:13:38.513Z] service/postgres created
[2021-10-27T10:13:38.513Z] deployment.apps/postgrest created
[2021-10-27T10:13:38.513Z] service/postgrest created
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy PostGUI via k8s Helm Chart)
[Pipeline] dir
[2021-10-27T10:13:38.820Z] Running in /var/lib/jenkins/workspace/PostGUI-docker-build-k8s-deploy-via-helm/postgui/k8s/helm
[Pipeline] {
[Pipeline] script
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
[2021-10-27T10:13:39.211Z] + helm upgrade --install postgui postgui
[2021-10-27T10:13:39.211Z] WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /var/lib/jenkins/.kube/k3s.yaml
[2021-10-27T10:13:39.211Z] WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /var/lib/jenkins/.kube/k3s.yaml
[2021-10-27T10:13:39.211Z] Release "postgui" does not exist. Installing it now.
[2021-10-27T10:13:40.123Z] NAME: postgui
[2021-10-27T10:13:40.123Z] LAST DEPLOYED: Wed Oct 27 13:13:39 2021
[2021-10-27T10:13:40.123Z] NAMESPACE: default
[2021-10-27T10:13:40.123Z] STATUS: deployed
[2021-10-27T10:13:40.123Z] REVISION: 1
[2021-10-27T10:13:40.123Z] NOTES:
[2021-10-27T10:13:40.123Z] 1. Get the application URL by running these commands:
[2021-10-27T10:13:40.123Z]   export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=postgui,app.kubernetes.io/instance=postgui" -o jsonpath="{.items[0].metadata.name}")
[2021-10-27T10:13:40.123Z]   export CONTAINER_PORT=$(kubectl get pod --namespace default $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
[2021-10-27T10:13:40.123Z]   echo "Visit http://127.0.0.1:8080 to use your application"
[2021-10-27T10:13:40.123Z]   kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // timestamps
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
